#include <windows.h>
#include <wincrypt.h>
#include "randpasswd.h"
#include "trace.h"
#include <utility>

//Taken from http://www.microsoft.com/smallbusiness/support/articles/select_sec_passwords.mspx
//I wrote a script that enumerate all the valid chars in a huge lookup table.
static int SuggestedUnicodePasswordChars[] = 
{
 128,  129,  130,  131,  132,  133,  134,  135,  136,  137,  138, 
 139,  140,  141,  142,  143,  144,  145,  146,  147,  148,  149, 
 150,  151,  152,  153,  154,  155,  156,  157,  158,  159,  306, 
 307,  312,  319,  320,  329,  330,  331,  383,  385,  386,  387, 
 388,  389,  390,  391,  392,  393,  394,  395,  396,  397,  398, 
 399,  400,  401,  402,  403,  404,  405,  406,  408,  409,  411, 
 412,  413,  414,  418,  419,  420,  421,  422,  423,  424,  426, 
 428,  429,  433,  434,  435,  436,  437,  439,  440,  441,  442, 
 443,  444,  445,  446,  447,  449,  450,  452,  453,  454,  455, 
 456,  457,  458,  459,  460,  477,  480,  481,  482,  483,  494, 
 495,  497,  498,  499,  500,  501,  502,  503,  504,  505,  506, 
 507,  508,  509,  510,  511,  512,  513,  514,  515,  516,  517, 
 518,  519,  520,  521,  522,  523,  524,  525,  526,  527,  528, 
 529,  530,  531,  532,  533,  534,  535,  536,  537,  538,  539, 
 540,  541,  542,  543,  544,  545,  546,  547,  548,  549,  550, 
 551,  552,  553,  554,  555,  556,  557,  558,  559,  560,  561, 
 562,  563,  564,  565,  566,  567,  568,  569,  570,  571,  572, 
 573,  574,  575,  576,  577,  578,  579,  580,  581,  582,  583, 
 584,  585,  586,  587,  588,  589,  590,  591,  592,  593,  594, 
 595,  596,  597,  598,  599,  600,  601,  602,  603,  604,  605, 
 606,  607,  608,  610,  611,  612,  613,  614,  615,  616,  617, 
 618,  619,  620,  621,  622,  623,  624,  625,  626,  627,  628, 
 629,  630,  631,  633,  634,  635,  636,  637,  638,  639,  640, 
 641,  642,  643,  644,  645,  646,  647,  648,  649,  650,  651, 
 652,  653,  654,  655,  656,  657,  658,  659,  660,  661,  662, 
 663,  664,  665,  666,  667,  668,  669,  670,  671,  672,  673, 
 674,  675,  676,  677,  678,  679,  680,  681,  682,  683,  684, 
 685,  686,  687,  688,  689,  690,  691,  692,  693,  694,  695, 
 696,  699,  701,  702,  703,  704,  705,  706,  707,  709,  711, 
 716,  718,  719,  720,  721,  722,  723,  724,  725,  726,  727, 
 728,  729,  731,  733,  734,  735,  736,  737,  738,  739,  740, 
 741,  742,  743,  744,  745,  746,  747,  748,  749,  750,  751, 
 752,  753,  754,  755,  756,  757,  758,  759,  760,  761,  762, 
 763,  764,  765,  766,  767,  773,  774,  775,  777,  779,  780, 
 781,  783,  784,  785,  786,  787,  788,  789,  790,  791,  792, 
 793,  794,  795,  796,  797,  798,  799,  800,  801,  802,  803, 
 804,  805,  806,  808,  809,  810,  811,  812,  813,  814,  815, 
 816,  819,  820,  821,  822,  823,  824,  825,  826,  827,  828, 
 829,  830,  831,  832,  833,  834,  835,  836,  837,  838,  839, 
 840,  841,  842,  843,  844,  845,  846,  847,  848,  849,  850, 
 851,  852,  853,  854,  855,  856,  857,  858,  859,  860,  861, 
 862,  863,  864,  865,  866,  867,  868,  869,  870,  871,  872, 
 873,  874,  875,  876,  877,  878,  879,  880,  881,  882,  883, 
 884,  885,  886,  887,  888,  889,  890,  891,  892,  893,  895, 
 896,  897,  898,  899,  900,  901,  902,  903,  904,  905,  906, 
 907,  908,  909,  910,  911,  912,  914,  918,  919,  921,  922, 
 923,  924,  925,  926,  927,  929,  930,  933,  935,  936,  938, 
 939,  940,  941,  942,  943,  944,  947,  950,  951,  952,  953, 
 954,  955,  957,  958,  959,  961,  962,  965,  967,  968,  969, 
 970,  971,  972,  973,  974,  975,  976,  977,  978,  979,  980, 
 981,  982,  983,  984,  985,  986,  987,  988,  989,  990,  991, 
 992,  993,  994,  995,  996,  997,  998,  999, 1000, 1001, 1002, 
1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 
1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 
};
 
static int nSuggestedUnicodePasswordChars =  sizeof  SuggestedUnicodePasswordChars / sizeof *SuggestedUnicodePasswordChars;


int GenerateRandomUnicodePassword(wchar_t *buffer, size_t size)
{
   HCRYPTPROV   hCryptProv;
   int result = 0;
	--size; //Save room for the terminating character

//-------------------------------------------------------------------
// Acquire a cryptographic provider context handle.

   if (CryptAcquireContext(&hCryptProv, NULL, NULL, PROV_RSA_FULL, CRYPT_MACHINE_KEYSET|CRYPT_VERIFYCONTEXT))
   {
      if (CryptGenRandom(hCryptProv, sizeof(wchar_t)*size, (BYTE*)buffer))
      {
			for(size_t i=0; i<size; ++i)
			{
				//I reuse the buffer for two purpose : on the right hand side, buffer contains a 
				//random number. I use it as an index to the suggested char table and replace the
				//random by a random, valid password char.
				buffer[i] = SuggestedUnicodePasswordChars[buffer[i]%nSuggestedUnicodePasswordChars];
			}
         result = size;
			buffer[size] = 0;
         CryptReleaseContext(hCryptProv, 0);
      }
   }

   if (!result)
      TRACE(eERROR, L"Unable to generate a random password\n");

	return result;
} 

